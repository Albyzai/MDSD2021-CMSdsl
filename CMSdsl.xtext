grammar jonasmohr.mdsd2021.CMSdsl with org.eclipse.xtext.common.Terminals

generate cMSdsl "http://www.mdsd2021.jonasmohr/CMSdsl"

Project:
	'project' name=ID ':' BEGIN
		serverConfig=ConnectionConfiguration
		validators+=ValidatorType*
		entities+=Entity*
	END
;

ConnectionConfiguration:
	{ConnectionConfiguration}
	'connection' ':' BEGIN
		config+=ServerDeclaration*
	END
;

ServerDeclaration:
	{Database} type='database' ':' value=STRING |
	{Hostname} type='hostname' ':' value=STRING |
	{Port} type='port' ':' value=INT |
	{Dialect} type='dialect' ':' value=DialectType |
	{Username} type='username' ':' value=STRING |
	{Password} type='password' ':' value=STRING
;


ValidatorType:
	'validator' name=ID ':' BEGIN
		ValidatorConstraints+=ValidatorConstraint*
	END
;

ValidatorConstraint:
	{MinMax}'minMax('min=INT',' max=INT ',' msg=STRING')' |
	{Length}'length('min=INT ',' max=INT ',' msg=STRING')'
;


Entity:
	'entity' name=ID ('extends' base=[Entity])? relationship=Relationship? ':' BEGIN
		model=EntityModel
		(service=EntityService)?
		(ui=EntityUI)?
	END
;

EntityModel:
	{EntityModel}
	'model' ':' BEGIN
		fields+=Field*
	END
;

EntityService:
	{EntityService}
	'service' ':' BEGIN
		endpoints+=CustomEndpoint*
	END
;

CustomEndpoint:
	httpType=RequestType function=EndpointFunction
;

EndpointFunction:
	name=ID ('(' parameters+=FunctionParameter (',' parameters+=FunctionParameter)* ')')? ':' returnType=ReturnType '=>' expression=LogicExp
;

ReturnType:
	{list} 'list' | {single} 'single' | {limit} 'limit' limit=INT 'offset' offset=INT
;

FunctionParameter:
	name=ID ':' type=DataType
;

EntityUI:
	{EntityUI}
	'clientUI' ':' BEGIN
		declarations+=EntityUIDeclaration*
	END
;

EntityUIDeclaration:
	{Display} 	'display' field=[Field] |
	{Hide}		'hide' field=[Field]
;

enum RequestType:
	GET='GET' | POST='POST' | UPDATE='UPDATE' | DELETE='DELETE' 
;


Relationship:
	relationType=RelationshipType entity=[Entity]
;

RelationshipType:
	{BelongsTo}		'belongs' 'to' |
	{BelongsToMany}	'belongs' 'to' 'many' |
	{HasOne}		'has' 'one' |
	{HasMany}		'has' 'many'
;

Field:
	name=ID ':' BEGIN
		properties+=Property*
		(UIConfig=UIModel)?
	END
;

Property:
	{Default} type='default' ':' value=STRING |
	{Type}type='type' ':' value=DataType
;

UIModel:
	{UIModel}
	type='UI' ':' BEGIN
		 declarations+=UIDeclaration*
	END
;

UIDeclaration:
	Validators | DisplayName
;

Validators:
	constraint='validators' ':' '['validators+=[ValidatorType] (',' validators+=[ValidatorType])* ']'
;

DisplayName:
	'displayName' ':' name=STRING
;

LogicExp returns Proposition:
	Conjunction ('||' {Disjunction.left=current} right=Conjunction)* 
;

Conjunction returns Proposition:
	Condition ('&&' {Conjunction.left=current} right=Condition)*
;

Condition returns Proposition:
	Comparison | '(' LogicExp ')'
;

Comparison:
	left=Exp op=CompOp right=Exp
;

Exp returns Expression:
	Factor ( ('+' {Add.left=current} | '-' {Sub.left=current}) right=Factor)*
;

Factor returns Expression:
	Primitive ( ('*' {Mul.left=current} | '/' {Div.left=current}) right=Primitive)*
;


Primitive returns Expression:
	 IntExpression | FieldRef
;

AbstractFunctionReference:
	Field | FunctionParameter
;


FieldRef returns Expression:
	ref=[AbstractFunctionReference]
;


CompOp:
	{Eq} '=' | {Lt} '<'| {Gt} '>' | {Lteq} '<=' | {Gteq} '>=' | {Neq} '!='
;



IntExpression returns Expression:
	value=INT
;



DialectType returns DialectType:
	{Psql} 	name='postgres' |
	{Mariadb} name='mariadb' |
	{Mssql} 	name='mssql' |
	{Mysql} 	name='mysql' |
	{Sqlite} 	name='sqlite'
;

DataType returns DataType:
    {Str}        'string'    |
    {Dt}         'date'      |
    {Integ}      'int'       |
    {Lng}        'long'      |
    {Bool}       'bool'   |
    {Flt}        'float'    
;



terminal BOOLEAN: 'true'|'false';	
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';
